<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on JChien</title>
    <link>http://replace-this-with-your-hugo-site.com/post/</link>
    <description>Recent content in Posts on JChien</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Jan 2016 12:35:21 +0800</lastBuildDate>
    <atom:link href="http://replace-this-with-your-hugo-site.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>backup</title>
      <link>http://replace-this-with-your-hugo-site.com/post/backup/</link>
      <pubDate>Mon, 04 Jan 2016 12:35:21 +0800</pubDate>
      
      <guid>http://replace-this-with-your-hugo-site.com/post/backup/</guid>
      <description>

&lt;p&gt;In my company, we have some data across servers. Data create/update/delete every day, so we want to have
a daily snapshot of them in case server failure, and it would be great if we have multiple version of them.&lt;/p&gt;

&lt;p&gt;The naively way is to create a new copy from previous snapshot and issue rsync with &lt;code&gt;rsync --delete&lt;/code&gt;. It works, but it is not efficent, and cost too
much disk space. &lt;code&gt;hardlink&lt;/code&gt; can&amp;rsquo;t be use here, since all files just reference to the same copy.&lt;/p&gt;

&lt;p&gt;Thanks to the copy-on-write filesystem available today. the problem can be solve in a elegant way. In my case, Btrfs save my day.&lt;/p&gt;

&lt;h1 id=&#34;create-btrfs-filesystem:4dfed9f30f3a8139ded8d1bbbcfd6a36&#34;&gt;create btrfs filesystem&lt;/h1&gt;

&lt;p&gt;I use file as a filesystem.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;dd &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;/dev/zero &lt;span style=&#34;color: #f8f8f2&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;backupfs &lt;span style=&#34;color: #f8f8f2&#34;&gt;bs&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;1M &lt;span style=&#34;color: #f8f8f2&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;10000
&lt;span style=&#34;color: #f8f8f2&#34;&gt;dev&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;losetup -f&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
losetup &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$dev&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt; backupfs
mkfs -t btrfs &lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;dev&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
mount -o rw,user_subvol_rm_allowed backupfs /mnt
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you allow normal user to remove volume, &lt;code&gt;user_subvol_rm_allowed&lt;/code&gt; should be enable.&lt;/p&gt;

&lt;h1 id=&#34;backup:4dfed9f30f3a8139ded8d1bbbcfd6a36&#34;&gt;backup&lt;/h1&gt;

&lt;p&gt;the flow is simple&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;create snapshot from previous snapshot.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;btrfs subvolume create &amp;lt;new&amp;gt; &lt;span style=&#34;color: #75715e&#34;&gt;#if it is the first sync&lt;/span&gt;
btrfs subvolume snapshot &amp;lt;old&amp;gt; &amp;lt;new&amp;gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sync data into new snapshot.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;rsync -az --delete &amp;lt;remote&amp;gt; &amp;lt;new&amp;gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;remove the oldest snapshot.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;btrfs subvolume delete &amp;lt;oldest&amp;gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The result is if a file doesn&amp;rsquo;t change, all snapshot have the same reference.
If cheanged, btrfs will create a new copy of it and keep old one untouched. That is how we archive incremental and multiple version backup.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>