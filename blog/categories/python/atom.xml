<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | JChien's Blog]]></title>
  <link href="http://JeffChien.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://JeffChien.github.io/"/>
  <updated>2013-12-01T01:12:30+08:00</updated>
  <id>http://JeffChien.github.io/</id>
  <author>
    <name><![CDATA[JChien]]></name>
    <email><![CDATA[jeffchien13@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[multi-dimentional list in python]]></title>
    <link href="http://JeffChien.github.io/blog/2013/12/01/multi-dimentional-list-in-python/"/>
    <updated>2013-12-01T00:15:00+08:00</updated>
    <id>http://JeffChien.github.io/blog/2013/12/01/multi-dimentional-list-in-python</id>
    <content type="html"><![CDATA[<p>Multi-dimentional list syntax in python is not as simple as I thought like</p>

<p><code>python
MyList = 3 * [ 3 * [ 3 * [0]]]
</code></p>

<p>and then, try to modify a value in it, <code>MyList[0][0][0] = 1</code>, you will see there will be <code>9</code> items with value 1,
this is not we expecte a normal multi-dimentional list should do.</p>

<p>the problem is python instead of create a new instance of list, it copy the <code>Reference</code> of it.  I misused it, and bugged me for a while, after digging on the net, came up with 3 different ways.</p>

<h3>comprehension</h3>

<p>```python
MyList = [[[0 for _ in range(3)] for _ in range(3)] for _ in range(3)]</p>

<h1>operate</h1>

<p>MyList[0][0][0] = 1
```</p>

<h3>simulate with dict</h3>

<p>with <code>collection.defaultdict</code> help</p>

<p>```python
from collections improt defaultdict</p>

<p>MyList = defaultdict(int)</p>

<h1>operate</h1>

<p>MyList[0,0,0] = 1
MyList[0,1,2] = &lsquo;Good&rsquo;
```
this give us a very similar syntax provided by NumPy</p>

<h3>use NumPy array</h3>

<p>```python
import numpy as np
MyList = np.zeros((3,3,3))</p>

<h1>operate</h1>

<p>MyList[0,0,0] = 1
```
this way unlike the other two above, only numbers is allowed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scripting alternative to bash]]></title>
    <link href="http://JeffChien.github.io/blog/2013/10/25/scripting-alternative-to-bash/"/>
    <updated>2013-10-25T23:42:00+08:00</updated>
    <id>http://JeffChien.github.io/blog/2013/10/25/scripting-alternative-to-bash</id>
    <content type="html"><![CDATA[<p>I really don&rsquo;t like to write bash script. I prefer use python as my shell language, but I have to admit that
in some cases, bash script can be simpler than python.</p>

<p>I found the discussion <a href="http://stackoverflow.com/questions/10239235/are-there-any-languages-that-compile-to-bash">Are there any languages that compile to Bash?</a></p>

<p>someone mention <a href="http://plumbum.readthedocs.org/en/latest/index.html">Plumbum</a> for python and <a href="https://github.com/arturadib/shelljs">ShellJS</a> for nodejs both
reimplement some unix tools. I tried both, here&rsquo;s what I learned.</p>

<ul>
<li><p>Plumbum: overriding many python operator <code>| &lt; &gt;</code> &hellip;etc. give these operator new meaning such that <code>&gt; or &lt;</code> for redirect.</p></li>
<li><p>ShellJS: javascript syntax not as simple as python, but there are <code>coffee script</code>/<code>livescript</code> which provide much elegant syntax,
  make this library worth using.</p></li>
</ul>


<p>there is a third option: <code>ipython</code>, after I read the book</p>

<p><img src="http://it-ebooks.info/images/ebooks/3/python_for_unix_and_linux_system_administration.jpg" alt="Python for Unix and Linux System Administration" /></p>

<p><code>ipython</code> is really amazing, I use it as my default pytohn REPL, this book give me lot&rsquo;s of way to write a bash like script in python way,
oh&hellip; not exactly pure python, ipython invent some of it&rsquo;s own syntax.</p>

<p>here are some example</p>

<ul>
<li><code>!ls</code>: execute ls</li>
<li><code>!ls | grep config</code>: ls with filter</li>
<li><code>%rehash</code>: hash command in PATH. make unix command can be use inside ipython REPL.</li>
</ul>


<p><code>python
(ipython) user = 'root'
(ipython) process = 'bash'
(ipython) listofitem = !ps aux | grep $user | grep $process
</code></p>

<p>script can be store in <code>*.ipy</code> for future use.</p>
]]></content>
  </entry>
  
</feed>
